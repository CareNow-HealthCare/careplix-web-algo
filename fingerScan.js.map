{
  "version": 3,
  "sources": ["../src/fingerScan.js"],
  "sourcesContent": ["const fingerScan = (() => {\n  let calibrationTime = 10000;\n  let scanTime = 60000;\n  let strictMode = false;\n  let isScanning = false;\n  let frameID = 0;\n  let start_time = 0;\n  let noDetectionCount = 0;\n  let wakeLock = undefined;\n  let video;\n  let canvas;\n  let ctx;\n  let raw_intensity = [];\n  let ppg_time = [];\n  let onFrameCallback = ({ timeElapsed = 0, type = \"\", percentage = 0, isFingerInView = false }) => {};\n  let onScanFinishCallback = ({ raw_intensity = [], ppg_time = [], average_fps = 0 }) => {};\n  let onErrorCallback = (err = new Error(\"Fingerscan Error.\")) => {};\n\n  const setupCamera = () =>\n    new Promise(async (resolve, reject) => {\n      try {\n        const isIOS = /iPhone|iPad|iPod|Macintosh|Mac/i.test(navigator.userAgent);\n        const stream = await navigator.mediaDevices.getUserMedia({\n          audio: false,\n          video: {\n            facingMode: \"environment\",\n            aspectRatio: 16 / 9,\n            frameRate: { ideal: 60 },\n            height: isIOS ? { exact: 720 } : undefined,\n          },\n        });\n        stream\n          .getVideoTracks()?.[0]\n          ?.applyConstraints?.({ advanced: [{ torch: true }] })\n          .catch((err) => console.error(new Error(\"Flash could not be acquired.\", { cause: err })));\n        video.srcObject = stream;\n        video.onloadedmetadata = async () => {\n          await video.play?.();\n          const waitForFirstFrame = () => {\n            if (video.readyState >= 2 && video.videoWidth > 0 && video.videoHeight > 0) resolve();\n            else frameID = requestAnimationFrame(waitForFirstFrame);\n          };\n          frameID = requestAnimationFrame(waitForFirstFrame);\n        };\n      } catch (err) {\n        reject(new Error(\"We are not able to access the Camera. Please try again.\", { cause: err }));\n      }\n    });\n\n  const stopScan = (noCallback = false) => {\n    cancelAnimationFrame(frameID);\n    video?.srcObject?.getTracks?.()?.forEach?.((track) => {\n      track?.stop?.();\n    });\n    isScanning = false;\n    window.onblur = undefined;\n    wakeLock\n      ?.release()\n      .then(() => console.log(\"WakeLock Released.\"))\n      .catch((err) => {\n        console.log(\"WakeLock Error.\");\n        console.error(err);\n      });\n    if (!noCallback)\n      onScanFinishCallback({\n        raw_intensity,\n        ppg_time,\n        average_fps: Math.round((raw_intensity.length * 1000) / scanTime),\n      });\n  };\n\n  const calcQuality = (rgb = { r: 0, g: 0, b: 0 }) => {\n    let confidence = undefined;\n    if (rgb.r < (strictMode ? 25 : 5)) confidence = 0;\n    else {\n      const nonRed = rgb.g + rgb.b;\n      const min = strictMode ? 35 : 60;\n      const max = strictMode ? 125 : 150;\n      if (nonRed <= min) confidence = 1;\n      else if (nonRed >= max) confidence = 0;\n      else confidence = (max - nonRed) / min;\n    }\n    return confidence;\n  };\n\n  const calcRGB_fromImageData = (imgData) => {\n    let count = 0,\n      sumRGB = { r: 0, g: 0, b: 0 };\n    for (let i = 0; i < imgData.data.length; i += 4)\n      if (imgData.data[i + 3] > 0) {\n        count++;\n        sumRGB.r += imgData.data[i];\n        sumRGB.g += imgData.data[i + 1];\n        sumRGB.b += imgData.data[i + 2];\n      }\n    return { r: sumRGB.r / count, g: sumRGB.g / count, b: sumRGB.b / count };\n  };\n\n  const drawCanvas = () => {\n    const imageWidth = video.videoWidth;\n    const imageHeight = video.videoHeight;\n    ctx.save();\n    ctx.clearRect(0, 0, imageWidth, imageHeight);\n    ctx.drawImage(video, 0, 0, imageWidth, imageHeight);\n    const avgRGB = calcRGB_fromImageData(\n      ctx.getImageData(\n        Math.round(imageWidth / 5),\n        Math.round(imageHeight / 5),\n        Math.round(imageWidth * 0.6),\n        Math.round(imageHeight * 0.6)\n      )\n    );\n    ctx.restore();\n    return avgRGB;\n  };\n\n  const scan = async (loop_start_time) => {\n    const timeElapsed = loop_start_time - start_time;\n    try {\n      if (timeElapsed <= calibrationTime) {\n        const intensity = drawCanvas();\n        const quality = calcQuality(intensity);\n        onFrameCallback({\n          timeElapsed,\n          type: \"calibration\",\n          percentage: Math.round((timeElapsed / calibrationTime) * 100),\n          isFingerInView: quality > 0.6,\n        });\n        frameID = requestAnimationFrame(scan);\n      } else if (timeElapsed <= calibrationTime + scanTime) {\n        const intensity = drawCanvas();\n        const quality = calcQuality(intensity);\n        if (quality > 0.6) noDetectionCount = 0;\n        else {\n          if (strictMode) noDetectionCount = 101;\n          else noDetectionCount++;\n        }\n        if (noDetectionCount > 100) {\n          stopScan(true);\n          onErrorCallback(\n            new Error(\n              \"Ensure your finger is correctly positioned on the camera and there is enough light if the flashlight isn't on.\"\n            )\n          );\n          return;\n        }\n        raw_intensity.push(intensity);\n        ppg_time.push(performance.now() - start_time);\n        onFrameCallback({\n          timeElapsed,\n          type: \"scan\",\n          percentage: Math.round(((timeElapsed - calibrationTime) / scanTime) * 100),\n          isFingerInView: quality > 0.6,\n        });\n        frameID = requestAnimationFrame(scan);\n      } else stopScan();\n    } catch (err) {\n      stopScan(true);\n      onErrorCallback(new Error(\"Sorry we're unable to compute the signal. Please try again.\", { cause: err }));\n    }\n  };\n\n  const startScan = async ({\n    calibrationTime_inSec = 10,\n    scanTime_inSec = 60,\n    strict_mode = false,\n    videoElement,\n    canvasElement,\n  }) => {\n    raw_intensity = [];\n    ppg_time = [];\n    isScanning = false;\n    noDetectionCount = 0;\n\n    try {\n      if (typeof calibrationTime_inSec !== \"number\" || calibrationTime_inSec < 3 || calibrationTime_inSec > 20)\n        throw new Error(\"Calibration duration can be between 3-20 seconds.\");\n      if (typeof scanTime_inSec !== \"number\" || scanTime_inSec < 10 || scanTime_inSec > 120 || scanTime_inSec % 5 !== 0)\n        throw new Error(\"Scan duration can be between 10-120 seconds (multiple of 5).\");\n      if (calibrationTime_inSec > scanTime_inSec) throw new Error(\"Scan duration cannot be smaller than Calibration duration.\");\n      calibrationTime = calibrationTime_inSec * 1000;\n      scanTime = scanTime_inSec * 1000;\n      if (typeof strict_mode !== \"boolean\") {\n        console.error(\"Provided Strict Mode value is Invalid!\\nSwitching to default...\");\n        strictMode = false;\n      } else strictMode = strict_mode;\n\n      navigator.wakeLock\n        ?.request(\"screen\")\n        .then((wakeLockSentinel) => {\n          wakeLock = wakeLockSentinel;\n          console.log(\"WakeLock Active.\");\n        })\n        .catch((err) => {\n          console.log(\"WakeLock Error.\");\n          console.error(err);\n        });\n\n      video = typeof videoElement === \"undefined\" ? document.getElementById(\"videoInput\") : videoElement;\n      if (video) await setupCamera();\n      else throw new Error(\"Cannot get the video element.\");\n\n      canvas = typeof canvasElement === \"undefined\" ? document.getElementById(\"canvasOutput\") : canvasElement;\n      if (canvas) {\n        canvas.width = video.videoWidth;\n        canvas.height = video.videoHeight;\n        ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      } else throw new Error(\"Cannot get the canvas element.\");\n\n      start_time = performance.now();\n      frameID = requestAnimationFrame(scan);\n      isScanning = true;\n      window.onblur = () => {\n        stopScan(true);\n        onErrorCallback(\n          new Error(\"App functionality disabled in the Background. Keep it in the Foreground for proper operation.\")\n        );\n      };\n    } catch (err) {\n      stopScan(true);\n      onErrorCallback(err);\n      throw new Error(\"Fingerscan Initialization Error.\", { cause: err });\n    }\n  };\n\n  return {\n    startScan,\n    stopScan,\n    onFrame: (callback = ({ timeElapsed = 0, type = \"\", percentage = 0, isFingerInView = false }) => {}) => {\n      if (typeof callback === \"function\") onFrameCallback = callback;\n    },\n    onScanFinish: (callback = ({ raw_intensity = [], ppg_time = [], average_fps = 0 }) => {}) => {\n      if (typeof callback === \"function\") onScanFinishCallback = callback;\n    },\n    onError: (callback = (err = new Error(\"Fingerscan Error.\")) => {}) => {\n      if (typeof callback === \"function\") onErrorCallback = callback;\n    },\n    get isInitializing() {\n      return () => !Boolean(isScanning);\n    },\n    get isScanning() {\n      return () => Boolean(isScanning);\n    },\n  };\n})();\n\nexport default fingerScan;\n"],
  "mappings": "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",
  "names": ["fingerScan", "calibrationTime", "scanTime", "strictMode", "isScanning", "frameID", "start_time", "noDetectionCount", "wakeLock", "video", "canvas", "ctx", "raw_intensity", "ppg_time", "onFrameCallback", "timeElapsed", "type", "percentage", "isFingerInView", "onScanFinishCallback", "average_fps", "onErrorCallback", "err", "setupCamera", "resolve", "reject", "_a", "_b", "_c", "isIOS", "stream", "waitForFirstFrame", "stopScan", "noCallback", "_d", "track", "calcQuality", "rgb", "confidence", "nonRed", "min", "max", "calcRGB_fromImageData", "imgData", "count", "sumRGB", "i", "drawCanvas", "imageWidth", "imageHeight", "avgRGB", "scan", "loop_start_time", "intensity", "quality", "calibrationTime_inSec", "scanTime_inSec", "strict_mode", "videoElement", "canvasElement", "wakeLockSentinel", "callback", "fingerScan_default"]
}
